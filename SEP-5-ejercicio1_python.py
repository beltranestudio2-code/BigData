# -*- coding: utf-8 -*-
"""Ejercicio1 Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V5S9QUDSJHheUZlxBKfcXhABIsQUcSXr

<H1> **Introducci√≥n a Python para Big Data** : üéä

Este notebook te guiar√° a trav√©s de los conceptos fundamentales de Python y la librer√≠a Pandas, esenciales para el an√°lisis de datos.

<H3> 1. Primeros pasos con Python üÜé

Comenzaremos con los conceptos b√°sicos de Python, como la creaci√≥n de variables y la impresi√≥n de valores.
"""

# Asignaci√≥n y tipos de datos
a = 1 + 1
b = "Big Data"

# Imprimir variables en pantalla
print(a)
print(b)

"""<H3> 2. Manejo de datos con Pandas ‚õµ

Pandas es una librer√≠a fundamental para trabajar con datos tabulares. Un DataFrame de Pandas es una estructura similar a una hoja de c√°lculo, con filas y columnas.

Crear un DataFrame

Podemos crear un DataFrame a partir de listas de Python.
"""

# Listas de datos
lista_personajes = ['Luke Skywalker', 'C-3PO', 'Darth Vader']
lista_altura = [172, 167, 202]

# Crear el DataFrame
import pandas as pd

d_star_wars = pd.DataFrame({
    'personaje': lista_personajes,
    'altura': lista_altura
})

# Mostrar el DataFrame y sus tipos de datos
print(d_star_wars)
print("---")
print(d_star_wars.dtypes)

"""<H3> 3. Cargar y explorar un archivo ‚úà

En el mundo real, los datos rara vez se crean manualmente.
Veamos como cargar un archivo CSV directamente desde una URL.
"""

# Commented out IPython magic to ensure Python compatibility.
# #Antes de comenzar tenemos que instalar la librer√≠a funpymodeling que me permite conocer informaci√≥n estad√≠stica de los datos
# %%capture
# !pip install funpymodeling

# Cargar un archivo CSV desde una URL
url = 'https://raw.githubusercontent.com/fpineyro/homework-0/master/starwars.csv'
d_star_wars_url = pd.read_csv(url)

# Explorar el DataFrame
# Muestra las primeras 5 filas
print("Primeras 5 filas:")
print(d_star_wars_url.head(7))

# Muestra el n√∫mero de filas y columnas (filas, columnas)
print("\nDimensiones del DataFrame:")
print(d_star_wars_url.shape)

# Muestra un resumen estad√≠stico de las variables
# ¬°Aseg√∫rate de instalar esta librer√≠a antes!
# !pip install funpymodeling
from funpymodeling.exploratory import status
print("\nEstad√≠sticas del DataFrame:")
status(d_star_wars_url)

"""<H3>4. Filtrar y seleccionar datos ‚õ≥

Para seleccionar datos espec√≠ficos de tu DataFrame, usa loc. Con loc puedes seleccionar filas y columnas por sus nombres o etiquetas.


El formato loc[filas, columnas] te permite seleccionar datos usando las etiquetas de filas y columnas.

[0, :]: El primer valor (0) selecciona la fila con la etiqueta 0. Los dos puntos (:) significan todas las columnas.

[:, 'nombre_columna']: Los dos puntos (:) seleccionan todas las filas. El nombre de la columna selecciona una columna espec√≠fica.

4.1. Seleccionar columnas
"""

# Seleccionar una sola columna
#d_star_wars['personaje']

# Seleccionar m√∫ltiples columnas
d_star_wars[['personaje', 'altura']]

"""4.2. Seleccionar filas

Podemos seleccionar filas bas√°ndote en su posici√≥n (√≠ndice).

Nota: el uso de 0:2 en loc es inclusivo, lo que significa que incluye los √≠ndices 0, 1 y 2.
"""

# Seleccionar la primera fila
d_star_wars.loc[0, :]

# Seleccionar las 3 primeras filas
d_star_wars.loc[0:2, :]

"""4.3. Filtrar con condiciones

Podemos usar una condici√≥n para filtrar filas que cumplan con un criterio espec√≠fico. Por ejemplo, encontrar todos los personajes cuya altura sea mayor que 200.
"""

# Crear un filtro (devuelve True/False para cada fila)
filtro_altura = d_star_wars['altura'] > 200

# Aplicar el filtro para obtener solo los registros que cumplen la condici√≥n
d_star_wars.loc[filtro_altura, :]

"""4.4. Reemplazar valores

Podemos combinar el filtrado con la asignaci√≥n para cambiar valores espec√≠ficos en el DataFrame.
"""

# Reemplazar la altura de Darth Vader por 185
d_star_wars.loc[d_star_wars['personaje'] == 'Darth Vader', 'altura'] = 185

# Verificar el cambio
print(d_star_wars.loc[d_star_wars['personaje'] == 'Darth Vader', :])

"""<H3>5. Manejar valores nulos (NaN) ‚õé

5.1. Los valores faltantes (NaN) son muy comunes. Es crucial saber c√≥mo identificarlos y manejarlos.
"""

# Identificar nulos por columna
print("N√∫mero de nulos en cada columna:")
print(d_star_wars_url.isnull().sum())

d_star_wars_url

# Reemplazar valores nulos en columnas categ√≥ricas
valores_a_rellenar = {'homeworld': 'nulo_world', 'species': 'nulo_species'}

d_star_wars_url.fillna(value=valores_a_rellenar, inplace=True)
print(d_star_wars_url)

#Vemos cual es el promedio de altura
print(d_star_wars_url['height'].mean())

# Reemplazar valores nulos en columnas num√©ricas con el promedio
promedio_altura = d_star_wars_url['height'].mean()


d_star_wars_url['height'] = d_star_wars_url['height'].fillna(promedio_altura)
d_star_wars_url

# Verificar que los nulos fueron reemplazados
status(d_star_wars_url['height'])

"""5.2. Eliminar registros con valores nulos
A veces, en lugar de reemplazar los valores nulos, lo mejor es eliminar por completo las filas o columnas que los contienen. El m√©todo dropna() de Pandas te permite hacerlo f√°cilmente.

Por defecto, dropna() elimina cualquier fila que contenga al menos un valor nulo. Es una forma r√°pida de limpiar el conjunto de datos si las filas con valores faltantes no son importantes para tu an√°lisis.
"""

# Eliminar las filas con valores nulos
d_star_wars_url.dropna(inplace=True)
status(d_star_wars_url)

"""<H3> 6. Crear nuevas columnas üõã

Puedes crear una nueva columna en un DataFrame y asignarle valores basados en una condici√≥n. Es una forma muy poderosa de derivar informaci√≥n a partir de los datos existentes.
"""

# Asignamos True si la altura es > 180, de lo contrario, False
d_star_wars['is_tall'] = d_star_wars['altura'] > 180

# Muestra el DataFrame con la nueva columna
print(d_star_wars)

"""<H3> 7. Copiar un DataFrame ¬©

Cuando realizas cambios en un DataFrame y quieres conservar la versi√≥n original, es una buena pr√°ctica hacer una copia. Esto te permite manipular la nueva versi√≥n sin afectar la original.
"""

#Hacer una copia del DataFrame
d_star_wars_copy = d_star_wars.copy()

# Ahora puedes trabajar con d_star_wars_copy sin afectar el original
d_star_wars_copy

"""************************************************************************************

<H2> Ejercicios üî∞

Aqu√≠ hay una serie de ejercicios para aplicar lo que aprendiste. ¬°No te frustres si te toma tiempo! La pr√°ctica es la clave.

<H3> Ejercicio 1. Carga el archivo heart_disease.csv en un DataFrame llamado d_hd. URL: https://raw.githubusercontent.com/fpineyro/homework-0/master/heart_disease.csv
"""

##Ejercicio 1

# Crear el DataFrame
import pandas as pd

url = 'https://raw.githubusercontent.com/fpineyro/homework-0/master/heart_disease.csv'
d_hd = pd.read_csv(url)

# Mostrar el DataFrame y sus tipos de datos
print(d_hd)

"""<H3> Ejercicio 2. Muestra los primeros 5 y los √∫ltimos 5 registros de d_hd."""

##Ejercicio 2
print("Primeras 5 filas:")
print(d_hd.head(5))

print("\nUltimas 5 filas:")
print(d_hd.tail(5))

"""<H3> Ejercicio 3. Selecciona e imprime las columnas age y has_heart_disease."""

##Ejercicio 3
print(d_hd[['age', 'has_heart_disease']])

"""<H3> Ejercicio 4. Crea un filtro para encontrar todos los registros donde colesterol (serum_cholestoral) sea mayor que 250."""

##Ejercicio 4

filtroReg = d_hd['serum_cholestoral'] > 250
d_hd.loc[filtroReg, :]

"""<H3> Ejercicio 5. Usa la funci√≥n status() para identificar qu√© variables tienen valores nulos."""

##Ejercicio 5

print("N√∫mero de nulos en cada columna:")
print(d_hd.isnull().sum())

"""<H3> Ejercicio 6. Reemplaza los valores nulos de la columna thal por un valor de 999."""

##Ejercicio 6
d_hd['thal'] = d_hd['thal'].fillna(999)
print(d_hd['thal'].isnull().sum())

"""<H3> Ejercicio 7. Filtrar por m√∫ltiples condiciones:

Utiliza el DataFrame d_hd y filtra para encontrar todos los registros de pacientes que tienen m√°s de 60 a√±os Y un nivel de colesterol (serum_cholestoral) superior a 250.
"""

##Ejercicio 7
filtro = d_hd[(d_hd['age'] > 60) & (d_hd['serum_cholestoral'] > 250)]
print(filtro.head())

"""<H3> Ejercicio 8. Reemplazar valores en una columna:

Selecciona la columna slope del DataFrame d_hd. Reemplaza el valor 1 por el string 'ascendente' y el valor 2 por 'descendente'. Muestra el resultado (no necesitas guardarlo en el DataFrame original).
"""

##Ejercicio 8
nuevacolumna = d_hd['slope'].replace({1: 'ascendente', 2: 'descendente'})
print(nuevacolumna)

"""<H3>Ejercicio 9. Crear una nueva columna:

En el DataFrame d_hd, crea una nueva columna llamada is_healthy. Asigna el valor True si el paciente no tiene enfermedad del coraz√≥n (es decir, el valor en heart_disease_severity es 0) y False en caso contrario. Muestra el DataFrame con la nueva columna
"""

##Ejercicio 9
d_hd['is_healthy'] = d_hd['heart_disease_severity'] == 0
print(d_hd)

"""<H3> Ejercicio 10. Eliminar registros con nulos:

Crea una copia del DataFrame d_hd llamada d_hd_clean. Usa el m√©todo dropna() para eliminar todos los registros que contengan al menos un valor nulo. Luego, usa status() para verificar que ya no hay valores nulos en d_hd_clean.
"""

##Ejercicio 10
d_hd_clean = d_hd.dropna()
print("Valores nulos en d_hd_clean:")
print(d_hd_clean.isnull().sum())

"""************************************************************************************"""
